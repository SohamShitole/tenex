version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: logsight
      POSTGRES_USER: logsight
      POSTGRES_PASSWORD: logsight123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logsight -d logsight"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - logsight-network

  # Redis for background tasks (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logsight-network

  # Flask Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://logsight:logsight123@db:5432/logsight
      - FLASK_ENV=development
      - FLASK_SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - JWT_ACCESS_TOKEN_EXPIRES=900
      - FRONTEND_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379/0
      - MAX_FILE_SIZE=104857600
      - UPLOAD_FOLDER=/app/uploads
      - LOG_LEVEL=INFO
      - DEBUG=true
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - logsight-network

  # Celery Worker (for background processing)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A app:celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://logsight:logsight123@db:5432/logsight
      - REDIS_URL=redis://redis:6379/0
      - FLASK_SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - UPLOAD_FOLDER=/app/uploads
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      - db
      - redis
      - backend
    networks:
      - logsight-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: npm run dev
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - logsight-network

  # Nginx (optional - for production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    profiles:
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - logsight-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  logsight-network:
    driver: bridge 